import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web
import os
import json
import aiohttp

# Configuration
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "your_bot_token_here")
API_BASE = os.getenv("API_BASE", "http://api:8000/api")
WEBAPP_URL = os.getenv("WEBAPP_URL", "http://localhost:3001")

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# Logging setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@router.message(Command("start"))
async def start_command(message: Message):
    """Handle /start command"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üåü –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∑–∞–π–Ω–µ—Ä",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏",
                    callback_data="my_donations"
                ),
                InlineKeyboardButton(
                    text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", 
                    callback_data="my_orders"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ",
                    callback_data="about"
                )
            ]
        ]
    )
    
    await message.answer(
        f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BvckZ!\n\n"
        f"–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ —Å—Ç–∞—Ä—É—é –æ–¥–µ–∂–¥—É –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è —Å –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –æ—Ä–Ω–∞–º–µ–Ω—Ç–∞–º–∏.\n\n"
        f"–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        f"1. –°–¥–∞–π—Ç–µ 4-5 —Å—Ç–∞—Ä—ã—Ö —Ñ—É—Ç–±–æ–ª–æ–∫\n"
        f"2. –°–æ–∑–¥–∞–π—Ç–µ –¥–∏–∑–∞–π–Ω –≤ 3D —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ\n"
        f"3. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=keyboard
    )

@router.message(Command("help"))
async def help_command(message: Message):
    """Handle /help command"""
    help_text = (
        "ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ BvckZ:\n\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "/donate - –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–¥–∞—á—É –≤–µ—â–µ–π\n"
        "/orders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n\n"
        "üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞ –∏ –∑–∞–∫–∞–∑–æ–≤!"
    )
    await message.answer(help_text)

@router.message(Command("status"))
async def status_command(message: Message):
    """Check system status"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_BASE}/health") as resp:
                if resp.status == 200:
                    data = await resp.json()
                    await message.answer(
                        f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n"
                        f"–°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}\n"
                        f"–í—Ä–µ–º—è: {data.get('timestamp', 'unknown')}"
                    )
                else:
                    await message.answer("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        logger.error(f"Status check failed: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞")

@router.message(Command("donate"))
async def donate_command(message: Message):
    """Create donation request via bot"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ WebApp",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
            ]
        ]
    )
    
    await message.answer(
        "üìã –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–¥–∞—á—É –≤–µ—â–µ–π\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π\n"  
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏\n"
        "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –¥–∏–∑–∞–π–Ω –±—É–¥—É—â–µ–≥–æ –∏–∑–¥–µ–ª–∏—è\n",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "my_donations")
async def my_donations_callback(callback):
    """Show user's donations"""
    await callback.answer()
    
    # Here we would integrate with API to get user's donations
    # For now, show placeholder
    await callback.message.edit_text(
        "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –≤–æ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
        "–í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        )
    )

@router.callback_query(F.data == "my_orders") 
async def my_orders_callback(callback):
    """Show user's orders"""
    await callback.answer()
    
    await callback.message.edit_text(
        "üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –≤–æ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤–∞—à–∏—Ö –∏–∑–¥–µ–ª–∏–π!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        )
    )

@router.callback_query(F.data == "about")
async def about_callback(callback):
    """Show about info"""
    await callback.answer()
    
    await callback.message.edit_text(
        "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ BvckZ\n\n"
        "üåç –ú–∏—Å—Å–∏—è: –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –æ–¥–µ–∂–¥—ã –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è\n"
        "‚ôªÔ∏è –≠–∫–æ–ª–æ–≥–∏—è: –£–º–µ–Ω—å—à–∞–µ–º —Ç–µ–∫—Å—Ç–∏–ª—å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã\n"
        "üé® –ö—É–ª—å—Ç—É—Ä–∞: –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ä–Ω–∞–º–µ–Ω—Ç—ã –∏ –¥–∏–∑–∞–π–Ω\n"
        "üíé –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: –ö–∞–∂–¥–æ–µ –∏–∑–¥–µ–ª–∏–µ –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º–æ\n\n"
        "üì± MVP –≤–µ—Ä—Å–∏—è - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        )
    )

@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback):
    """Back to main menu"""
    await callback.answer()
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üåü –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∑–∞–π–Ω–µ—Ä",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏",
                    callback_data="my_donations"
                ),
                InlineKeyboardButton(
                    text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", 
                    callback_data="my_orders"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ",
                    callback_data="about"
                )
            ]
        ]
    )
    
    await callback.message.edit_text(
        f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BvckZ!\n\n"
        f"–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ —Å—Ç–∞—Ä—É—é –æ–¥–µ–∂–¥—É –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è —Å –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –æ—Ä–Ω–∞–º–µ–Ω—Ç–∞–º–∏.\n\n"
        f"–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        f"1. –°–¥–∞–π—Ç–µ 4-5 —Å—Ç–∞—Ä—ã—Ö —Ñ—É—Ç–±–æ–ª–æ–∫\n"
        f"2. –°–æ–∑–¥–∞–π—Ç–µ –¥–∏–∑–∞–π–Ω –≤ 3D —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ\n"
        f"3. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=keyboard
    )

# Webhook endpoint for notifications from API
async def webhook_handler(request):
    """Handle webhooks from main API"""
    try:
        data = await request.json()
        event_type = data.get('type')
        payload = data.get('payload', {})
        
        logger.info(f"Received webhook: {event_type}")
        
        if event_type == 'donation_created':
            user_id = payload.get('telegram_id')
            if user_id:
                await bot.send_message(
                    user_id,
                    f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n"
                    f"ID: {payload.get('donation_id')}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π: {payload.get('items_count')}\n"
                    f"–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏: {payload.get('pickup_method')}\n\n"
                    f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!"
                )
        
        elif event_type == 'order_status_changed':
            user_id = payload.get('telegram_id')
            if user_id:
                status_messages = {
                    'paid': 'üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ.',
                    'production': 'üè≠ –í–∞—à–µ –∏–∑–¥–µ–ª–∏–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π!',
                    'shipped': 'üì¶ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–∫–æ—Ä–æ –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ.',
                    'completed': 'üéâ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ BvckZ!'
                }
                
                message = status_messages.get(payload.get('status'), '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è')
                await bot.send_message(
                    user_id,
                    f"üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{payload.get('order_id')}\n\n{message}"
                )
        
        return web.json_response({'status': 'ok'})
        
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return web.json_response({'error': str(e)}, status=400)

# Add router to dispatcher
dp.include_router(router)

async def main():
    """Main function"""
    logger.info("Starting Telegram Bot...")
    
    # Create webhook app
    app = web.Application()
    app.router.add_post('/webhook', webhook_handler)
    
    # Start polling (for development)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
