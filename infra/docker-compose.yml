version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO S3 Compatible Storage
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    environment:
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - WEBHOOK_URL=http://localhost:5678/
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - postgres
      - redis

  # FastAPI Backend
  api:
    build:
      context: ../mvp-services/api
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
    ports:
      - "8000:8000"
    volumes:
      - ../mvp-services/api:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Nuxt Frontend
  web:
    build:
      context: ../mvp-services/web-landing
      dockerfile: Dockerfile
    environment:
      - NUXT_PUBLIC_API_BASE=${NUXT_PUBLIC_API_BASE}
    ports:
      - "3000:3000"
    volumes:
      - ../mvp-services/web-landing:/app
      - /app/node_modules
    depends_on:
      - api
    command: npm run dev

  # WebApp (Nuxt)
  webapp:
    build:
      context: ../mvp-services/web-webapp
      dockerfile: Dockerfile
    environment:
      - NUXT_PUBLIC_API_BASE=${NUXT_PUBLIC_API_BASE}
    ports:
      - "3001:3000"
    volumes:
      - ../mvp-services/web-webapp:/app
      - /app/node_modules
    depends_on:
      - api
    command: npm run dev

  # Media Service
  media:
    build:
      context: ../mvp-services/media
      dockerfile: Dockerfile
    environment:
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
    ports:
      - "8001:8001"
    volumes:
      - ../mvp-services/media:/app
    depends_on:
      minio:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload

  # Telegram Bot
  bot:
    build:
      context: ../mvp-services/bot
      dockerfile: Dockerfile
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - API_BASE=http://api:8000/api
      - WEBAPP_URL=http://localhost:3001
    ports:
      - "8080:8080"
    volumes:
      - ../mvp-services/bot:/app
    depends_on:
      - api
    # Uncomment when you have bot token
    # command: python main.py

volumes:
  postgres_data:
  redis_data:
  minio_data:
  n8n_data:

networks:
  default:
    name: bvckz_mvp
